Grammar

    0 $accept: MP $end

    1 MP: L_vart LD C

    2 E: E Pl E
    3  | E Mo E
    4  | E Mu E
    5  | E Or E
    6  | E Lt E
    7  | E Eq E
    8  | E And E
    9  | Not E
   10  | '(' E ')'
   11  | I
   12  | V
   13  | true
   14  | false
   15  | V '(' L_args ')'
   16  | NewAr TP '[' E ']'
   17  | Et

   18 Et: V '[' E ']'
   19   | Et '[' E ']'

   20 C: C Se Ca
   21  | Sk
   22  | '{' C '}'
   23  | V '(' L_args ')'
   24  | Ca

   25 Ca: Wh E Do Ca
   26   | If E Th C El Ca
   27   | Et Af E
   28   | V Af E

   29 L_args: %empty
   30       | L_argsnn

   31 L_argsnn: E
   32         | E ',' L_argsnn

   33 L_argt: %empty
   34       | L_argtnn

   35 L_argtnn: Argt
   36         | L_argtnn ',' Argt

   37 Argt: V ':' TP

   38 TP: T_boo
   39   | T_int
   40   | T_ar TP

   41 L_vart: %empty
   42       | L_vartnn

   43 L_vartnn: Var Argt
   44         | L_vartnn ',' Var Argt

   45 D_entp: Dep NPro '(' L_argt ')'

   46 D_entf: Def NFon '(' L_argt ')' ':' TP

   47 D: D_entp L_vart C
   48  | D_entf L_vart C

   49 LD: %empty
   50   | LD D


Terminals, with rules where they appear

$end (0) 0
'(' (40) 10 15 23 45 46
')' (41) 10 15 23 45 46
',' (44) 32 36 44
':' (58) 37 46
'[' (91) 16 18 19
']' (93) 16 18 19
'{' (123) 22
'}' (125) 22
error (256)
T_boo (258) 38
T_int (259) 39
Def (260) 46
Dep (261) 45
Af (262) 27 28
true (263) 13
false (264) 14
Se (265) 20
If (266) 26
Th (267) 26
El (268) 26
Var (269) 43 44
Wh (270) 25
Do (271) 25
Pl (272) 2
Mo (273) 3
Mu (274) 4
And (275) 8
Or (276) 5
Not (277) 9
Lt (278) 6
Eq (279) 7
Sk (280) 21
NFon (281) 46
NPro (282) 45
NewAr (283) 16
I (284) 11
V (285) 12 15 18 23 28 37
T_ar (286) 40


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
MP (41)
    on left: 1, on right: 0
E (42)
    on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17, on right: 2 3
    4 5 6 7 8 9 10 16 18 19 25 26 27 28 31 32
Et (43)
    on left: 18 19, on right: 17 19 27
C (44)
    on left: 20 21 22 23 24, on right: 1 20 22 26 47 48
Ca (45)
    on left: 25 26 27 28, on right: 20 24 25 26
L_args (46)
    on left: 29 30, on right: 15 23
L_argsnn (47)
    on left: 31 32, on right: 30 32
L_argt (48)
    on left: 33 34, on right: 45 46
L_argtnn (49)
    on left: 35 36, on right: 34 36
Argt (50)
    on left: 37, on right: 35 36 43 44
TP (51)
    on left: 38 39 40, on right: 16 37 40 46
L_vart (52)
    on left: 41 42, on right: 1 47 48
L_vartnn (53)
    on left: 43 44, on right: 42 44
D_entp (54)
    on left: 45, on right: 47
D_entf (55)
    on left: 46, on right: 48
D (56)
    on left: 47 48, on right: 50
LD (57)
    on left: 49 50, on right: 1 50


State 0

    0 $accept: . MP $end
    1 MP: . L_vart LD C
   41 L_vart: . %empty  [Def, Dep, If, Wh, Sk, V, '{']
   42       | . L_vartnn
   43 L_vartnn: . Var Argt
   44         | . L_vartnn ',' Var Argt

    Var  shift, and go to state 1

    $default  reduce using rule 41 (L_vart)

    MP        go to state 2
    L_vart    go to state 3
    L_vartnn  go to state 4


State 1

   37 Argt: . V ':' TP
   43 L_vartnn: Var . Argt

    V  shift, and go to state 5

    Argt  go to state 6


State 2

    0 $accept: MP . $end

    $end  shift, and go to state 7


State 3

    1 MP: L_vart . LD C
   49 LD: . %empty
   50   | . LD D

    $default  reduce using rule 49 (LD)

    LD  go to state 8


State 4

   42 L_vart: L_vartnn .  [Def, Dep, If, Wh, Sk, V, '{']
   44 L_vartnn: L_vartnn . ',' Var Argt

    ','  shift, and go to state 9

    $default  reduce using rule 42 (L_vart)


State 5

   37 Argt: V . ':' TP

    ':'  shift, and go to state 10


State 6

   43 L_vartnn: Var Argt .

    $default  reduce using rule 43 (L_vartnn)


State 7

    0 $accept: MP $end .

    $default  accept


State 8

    1 MP: L_vart LD . C
   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'
   20 C: . C Se Ca
   21  | . Sk
   22  | . '{' C '}'
   23  | . V '(' L_args ')'
   24  | . Ca
   25 Ca: . Wh E Do Ca
   26   | . If E Th C El Ca
   27   | . Et Af E
   28   | . V Af E
   45 D_entp: . Dep NPro '(' L_argt ')'
   46 D_entf: . Def NFon '(' L_argt ')' ':' TP
   47 D: . D_entp L_vart C
   48  | . D_entf L_vart C
   50 LD: LD . D

    Def  shift, and go to state 11
    Dep  shift, and go to state 12
    If   shift, and go to state 13
    Wh   shift, and go to state 14
    Sk   shift, and go to state 15
    V    shift, and go to state 16
    '{'  shift, and go to state 17

    Et      go to state 18
    C       go to state 19
    Ca      go to state 20
    D_entp  go to state 21
    D_entf  go to state 22
    D       go to state 23


State 9

   44 L_vartnn: L_vartnn ',' . Var Argt

    Var  shift, and go to state 24


State 10

   37 Argt: V ':' . TP
   38 TP: . T_boo
   39   | . T_int
   40   | . T_ar TP

    T_boo  shift, and go to state 25
    T_int  shift, and go to state 26
    T_ar   shift, and go to state 27

    TP  go to state 28


State 11

   46 D_entf: Def . NFon '(' L_argt ')' ':' TP

    NFon  shift, and go to state 29


State 12

   45 D_entp: Dep . NPro '(' L_argt ')'

    NPro  shift, and go to state 30


State 13

    2 E: . E Pl E
    3  | . E Mo E
    4  | . E Mu E
    5  | . E Or E
    6  | . E Lt E
    7  | . E Eq E
    8  | . E And E
    9  | . Not E
   10  | . '(' E ')'
   11  | . I
   12  | . V
   13  | . true
   14  | . false
   15  | . V '(' L_args ')'
   16  | . NewAr TP '[' E ']'
   17  | . Et
   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'
   26 Ca: If . E Th C El Ca

    true   shift, and go to state 31
    false  shift, and go to state 32
    Not    shift, and go to state 33
    NewAr  shift, and go to state 34
    I      shift, and go to state 35
    V      shift, and go to state 36
    '('    shift, and go to state 37

    E   go to state 38
    Et  go to state 39


State 14

    2 E: . E Pl E
    3  | . E Mo E
    4  | . E Mu E
    5  | . E Or E
    6  | . E Lt E
    7  | . E Eq E
    8  | . E And E
    9  | . Not E
   10  | . '(' E ')'
   11  | . I
   12  | . V
   13  | . true
   14  | . false
   15  | . V '(' L_args ')'
   16  | . NewAr TP '[' E ']'
   17  | . Et
   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'
   25 Ca: Wh . E Do Ca

    true   shift, and go to state 31
    false  shift, and go to state 32
    Not    shift, and go to state 33
    NewAr  shift, and go to state 34
    I      shift, and go to state 35
    V      shift, and go to state 36
    '('    shift, and go to state 37

    E   go to state 40
    Et  go to state 39


State 15

   21 C: Sk .

    $default  reduce using rule 21 (C)


State 16

   18 Et: V . '[' E ']'
   23 C: V . '(' L_args ')'
   28 Ca: V . Af E

    Af   shift, and go to state 41
    '('  shift, and go to state 42
    '['  shift, and go to state 43


State 17

   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'
   20 C: . C Se Ca
   21  | . Sk
   22  | . '{' C '}'
   22  | '{' . C '}'
   23  | . V '(' L_args ')'
   24  | . Ca
   25 Ca: . Wh E Do Ca
   26   | . If E Th C El Ca
   27   | . Et Af E
   28   | . V Af E

    If   shift, and go to state 13
    Wh   shift, and go to state 14
    Sk   shift, and go to state 15
    V    shift, and go to state 16
    '{'  shift, and go to state 17

    Et  go to state 18
    C   go to state 44
    Ca  go to state 20


State 18

   19 Et: Et . '[' E ']'
   27 Ca: Et . Af E

    Af   shift, and go to state 45
    '['  shift, and go to state 46


State 19

    1 MP: L_vart LD C .  [$end]
   20 C: C . Se Ca

    Se  shift, and go to state 47

    $default  reduce using rule 1 (MP)


State 20

   24 C: Ca .

    $default  reduce using rule 24 (C)


State 21

   41 L_vart: . %empty  [If, Wh, Sk, V, '{']
   42       | . L_vartnn
   43 L_vartnn: . Var Argt
   44         | . L_vartnn ',' Var Argt
   47 D: D_entp . L_vart C

    Var  shift, and go to state 1

    $default  reduce using rule 41 (L_vart)

    L_vart    go to state 48
    L_vartnn  go to state 4


State 22

   41 L_vart: . %empty  [If, Wh, Sk, V, '{']
   42       | . L_vartnn
   43 L_vartnn: . Var Argt
   44         | . L_vartnn ',' Var Argt
   48 D: D_entf . L_vart C

    Var  shift, and go to state 1

    $default  reduce using rule 41 (L_vart)

    L_vart    go to state 49
    L_vartnn  go to state 4


State 23

   50 LD: LD D .

    $default  reduce using rule 50 (LD)


State 24

   37 Argt: . V ':' TP
   44 L_vartnn: L_vartnn ',' Var . Argt

    V  shift, and go to state 5

    Argt  go to state 50


State 25

   38 TP: T_boo .

    $default  reduce using rule 38 (TP)


State 26

   39 TP: T_int .

    $default  reduce using rule 39 (TP)


State 27

   38 TP: . T_boo
   39   | . T_int
   40   | . T_ar TP
   40   | T_ar . TP

    T_boo  shift, and go to state 25
    T_int  shift, and go to state 26
    T_ar   shift, and go to state 27

    TP  go to state 51


State 28

   37 Argt: V ':' TP .

    $default  reduce using rule 37 (Argt)


State 29

   46 D_entf: Def NFon . '(' L_argt ')' ':' TP

    '('  shift, and go to state 52


State 30

   45 D_entp: Dep NPro . '(' L_argt ')'

    '('  shift, and go to state 53


State 31

   13 E: true .

    $default  reduce using rule 13 (E)


State 32

   14 E: false .

    $default  reduce using rule 14 (E)


State 33

    2 E: . E Pl E
    3  | . E Mo E
    4  | . E Mu E
    5  | . E Or E
    6  | . E Lt E
    7  | . E Eq E
    8  | . E And E
    9  | . Not E
    9  | Not . E
   10  | . '(' E ')'
   11  | . I
   12  | . V
   13  | . true
   14  | . false
   15  | . V '(' L_args ')'
   16  | . NewAr TP '[' E ']'
   17  | . Et
   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'

    true   shift, and go to state 31
    false  shift, and go to state 32
    Not    shift, and go to state 33
    NewAr  shift, and go to state 34
    I      shift, and go to state 35
    V      shift, and go to state 36
    '('    shift, and go to state 37

    E   go to state 54
    Et  go to state 39


State 34

   16 E: NewAr . TP '[' E ']'
   38 TP: . T_boo
   39   | . T_int
   40   | . T_ar TP

    T_boo  shift, and go to state 25
    T_int  shift, and go to state 26
    T_ar   shift, and go to state 27

    TP  go to state 55


State 35

   11 E: I .

    $default  reduce using rule 11 (E)


State 36

   12 E: V .  [$end, Def, Dep, Se, If, Th, El, Wh, Do, Pl, Mo, Mu, And, Or, Lt, Eq, Sk, V, ')', ']', '{', '}', ',']
   15  | V . '(' L_args ')'
   18 Et: V . '[' E ']'

    '('  shift, and go to state 56
    '['  shift, and go to state 43

    $default  reduce using rule 12 (E)


State 37

    2 E: . E Pl E
    3  | . E Mo E
    4  | . E Mu E
    5  | . E Or E
    6  | . E Lt E
    7  | . E Eq E
    8  | . E And E
    9  | . Not E
   10  | . '(' E ')'
   10  | '(' . E ')'
   11  | . I
   12  | . V
   13  | . true
   14  | . false
   15  | . V '(' L_args ')'
   16  | . NewAr TP '[' E ']'
   17  | . Et
   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'

    true   shift, and go to state 31
    false  shift, and go to state 32
    Not    shift, and go to state 33
    NewAr  shift, and go to state 34
    I      shift, and go to state 35
    V      shift, and go to state 36
    '('    shift, and go to state 37

    E   go to state 57
    Et  go to state 39


State 38

    2 E: E . Pl E
    3  | E . Mo E
    4  | E . Mu E
    5  | E . Or E
    6  | E . Lt E
    7  | E . Eq E
    8  | E . And E
   26 Ca: If E . Th C El Ca

    Th   shift, and go to state 58
    Pl   shift, and go to state 59
    Mo   shift, and go to state 60
    Mu   shift, and go to state 61
    And  shift, and go to state 62
    Or   shift, and go to state 63
    Lt   shift, and go to state 64
    Eq   shift, and go to state 65


State 39

   17 E: Et .  [$end, Def, Dep, Se, If, Th, El, Wh, Do, Pl, Mo, Mu, And, Or, Lt, Eq, Sk, V, ')', ']', '{', '}', ',']
   19 Et: Et . '[' E ']'

    '['  shift, and go to state 46

    $default  reduce using rule 17 (E)


State 40

    2 E: E . Pl E
    3  | E . Mo E
    4  | E . Mu E
    5  | E . Or E
    6  | E . Lt E
    7  | E . Eq E
    8  | E . And E
   25 Ca: Wh E . Do Ca

    Do   shift, and go to state 66
    Pl   shift, and go to state 59
    Mo   shift, and go to state 60
    Mu   shift, and go to state 61
    And  shift, and go to state 62
    Or   shift, and go to state 63
    Lt   shift, and go to state 64
    Eq   shift, and go to state 65


State 41

    2 E: . E Pl E
    3  | . E Mo E
    4  | . E Mu E
    5  | . E Or E
    6  | . E Lt E
    7  | . E Eq E
    8  | . E And E
    9  | . Not E
   10  | . '(' E ')'
   11  | . I
   12  | . V
   13  | . true
   14  | . false
   15  | . V '(' L_args ')'
   16  | . NewAr TP '[' E ']'
   17  | . Et
   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'
   28 Ca: V Af . E

    true   shift, and go to state 31
    false  shift, and go to state 32
    Not    shift, and go to state 33
    NewAr  shift, and go to state 34
    I      shift, and go to state 35
    V      shift, and go to state 36
    '('    shift, and go to state 37

    E   go to state 67
    Et  go to state 39


State 42

    2 E: . E Pl E
    3  | . E Mo E
    4  | . E Mu E
    5  | . E Or E
    6  | . E Lt E
    7  | . E Eq E
    8  | . E And E
    9  | . Not E
   10  | . '(' E ')'
   11  | . I
   12  | . V
   13  | . true
   14  | . false
   15  | . V '(' L_args ')'
   16  | . NewAr TP '[' E ']'
   17  | . Et
   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'
   23 C: V '(' . L_args ')'
   29 L_args: . %empty  [')']
   30       | . L_argsnn
   31 L_argsnn: . E
   32         | . E ',' L_argsnn

    true   shift, and go to state 31
    false  shift, and go to state 32
    Not    shift, and go to state 33
    NewAr  shift, and go to state 34
    I      shift, and go to state 35
    V      shift, and go to state 36
    '('    shift, and go to state 37

    $default  reduce using rule 29 (L_args)

    E         go to state 68
    Et        go to state 39
    L_args    go to state 69
    L_argsnn  go to state 70


State 43

    2 E: . E Pl E
    3  | . E Mo E
    4  | . E Mu E
    5  | . E Or E
    6  | . E Lt E
    7  | . E Eq E
    8  | . E And E
    9  | . Not E
   10  | . '(' E ')'
   11  | . I
   12  | . V
   13  | . true
   14  | . false
   15  | . V '(' L_args ')'
   16  | . NewAr TP '[' E ']'
   17  | . Et
   18 Et: . V '[' E ']'
   18   | V '[' . E ']'
   19   | . Et '[' E ']'

    true   shift, and go to state 31
    false  shift, and go to state 32
    Not    shift, and go to state 33
    NewAr  shift, and go to state 34
    I      shift, and go to state 35
    V      shift, and go to state 36
    '('    shift, and go to state 37

    E   go to state 71
    Et  go to state 39


State 44

   20 C: C . Se Ca
   22  | '{' C . '}'

    Se   shift, and go to state 47
    '}'  shift, and go to state 72


State 45

    2 E: . E Pl E
    3  | . E Mo E
    4  | . E Mu E
    5  | . E Or E
    6  | . E Lt E
    7  | . E Eq E
    8  | . E And E
    9  | . Not E
   10  | . '(' E ')'
   11  | . I
   12  | . V
   13  | . true
   14  | . false
   15  | . V '(' L_args ')'
   16  | . NewAr TP '[' E ']'
   17  | . Et
   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'
   27 Ca: Et Af . E

    true   shift, and go to state 31
    false  shift, and go to state 32
    Not    shift, and go to state 33
    NewAr  shift, and go to state 34
    I      shift, and go to state 35
    V      shift, and go to state 36
    '('    shift, and go to state 37

    E   go to state 73
    Et  go to state 39


State 46

    2 E: . E Pl E
    3  | . E Mo E
    4  | . E Mu E
    5  | . E Or E
    6  | . E Lt E
    7  | . E Eq E
    8  | . E And E
    9  | . Not E
   10  | . '(' E ')'
   11  | . I
   12  | . V
   13  | . true
   14  | . false
   15  | . V '(' L_args ')'
   16  | . NewAr TP '[' E ']'
   17  | . Et
   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'
   19   | Et '[' . E ']'

    true   shift, and go to state 31
    false  shift, and go to state 32
    Not    shift, and go to state 33
    NewAr  shift, and go to state 34
    I      shift, and go to state 35
    V      shift, and go to state 36
    '('    shift, and go to state 37

    E   go to state 74
    Et  go to state 39


State 47

   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'
   20 C: C Se . Ca
   25 Ca: . Wh E Do Ca
   26   | . If E Th C El Ca
   27   | . Et Af E
   28   | . V Af E

    If  shift, and go to state 13
    Wh  shift, and go to state 14
    V   shift, and go to state 75

    Et  go to state 18
    Ca  go to state 76


State 48

   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'
   20 C: . C Se Ca
   21  | . Sk
   22  | . '{' C '}'
   23  | . V '(' L_args ')'
   24  | . Ca
   25 Ca: . Wh E Do Ca
   26   | . If E Th C El Ca
   27   | . Et Af E
   28   | . V Af E
   47 D: D_entp L_vart . C

    If   shift, and go to state 13
    Wh   shift, and go to state 14
    Sk   shift, and go to state 15
    V    shift, and go to state 16
    '{'  shift, and go to state 17

    Et  go to state 18
    C   go to state 77
    Ca  go to state 20


State 49

   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'
   20 C: . C Se Ca
   21  | . Sk
   22  | . '{' C '}'
   23  | . V '(' L_args ')'
   24  | . Ca
   25 Ca: . Wh E Do Ca
   26   | . If E Th C El Ca
   27   | . Et Af E
   28   | . V Af E
   48 D: D_entf L_vart . C

    If   shift, and go to state 13
    Wh   shift, and go to state 14
    Sk   shift, and go to state 15
    V    shift, and go to state 16
    '{'  shift, and go to state 17

    Et  go to state 18
    C   go to state 78
    Ca  go to state 20


State 50

   44 L_vartnn: L_vartnn ',' Var Argt .

    $default  reduce using rule 44 (L_vartnn)


State 51

   40 TP: T_ar TP .

    $default  reduce using rule 40 (TP)


State 52

   33 L_argt: . %empty  [')']
   34       | . L_argtnn
   35 L_argtnn: . Argt
   36         | . L_argtnn ',' Argt
   37 Argt: . V ':' TP
   46 D_entf: Def NFon '(' . L_argt ')' ':' TP

    V  shift, and go to state 5

    $default  reduce using rule 33 (L_argt)

    L_argt    go to state 79
    L_argtnn  go to state 80
    Argt      go to state 81


State 53

   33 L_argt: . %empty  [')']
   34       | . L_argtnn
   35 L_argtnn: . Argt
   36         | . L_argtnn ',' Argt
   37 Argt: . V ':' TP
   45 D_entp: Dep NPro '(' . L_argt ')'

    V  shift, and go to state 5

    $default  reduce using rule 33 (L_argt)

    L_argt    go to state 82
    L_argtnn  go to state 80
    Argt      go to state 81


State 54

    2 E: E . Pl E
    3  | E . Mo E
    4  | E . Mu E
    5  | E . Or E
    6  | E . Lt E
    7  | E . Eq E
    8  | E . And E
    9  | Not E .  [$end, Def, Dep, Se, If, Th, El, Wh, Do, Pl, Mo, Mu, And, Or, Lt, Eq, Sk, V, ')', ']', '{', '}', ',']

    $default  reduce using rule 9 (E)

    Conflict between rule 9 and token Pl resolved as reduce (%left Pl).
    Conflict between rule 9 and token Mo resolved as reduce (%left Mo).
    Conflict between rule 9 and token Mu resolved as reduce (%left Mu).
    Conflict between rule 9 and token And resolved as reduce (%left And).
    Conflict between rule 9 and token Or resolved as reduce (%left Or).
    Conflict between rule 9 and token Lt resolved as reduce (%left Lt).
    Conflict between rule 9 and token Eq resolved as reduce (%left Eq).


State 55

   16 E: NewAr TP . '[' E ']'

    '['  shift, and go to state 83


State 56

    2 E: . E Pl E
    3  | . E Mo E
    4  | . E Mu E
    5  | . E Or E
    6  | . E Lt E
    7  | . E Eq E
    8  | . E And E
    9  | . Not E
   10  | . '(' E ')'
   11  | . I
   12  | . V
   13  | . true
   14  | . false
   15  | . V '(' L_args ')'
   15  | V '(' . L_args ')'
   16  | . NewAr TP '[' E ']'
   17  | . Et
   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'
   29 L_args: . %empty  [')']
   30       | . L_argsnn
   31 L_argsnn: . E
   32         | . E ',' L_argsnn

    true   shift, and go to state 31
    false  shift, and go to state 32
    Not    shift, and go to state 33
    NewAr  shift, and go to state 34
    I      shift, and go to state 35
    V      shift, and go to state 36
    '('    shift, and go to state 37

    $default  reduce using rule 29 (L_args)

    E         go to state 68
    Et        go to state 39
    L_args    go to state 84
    L_argsnn  go to state 70


State 57

    2 E: E . Pl E
    3  | E . Mo E
    4  | E . Mu E
    5  | E . Or E
    6  | E . Lt E
    7  | E . Eq E
    8  | E . And E
   10  | '(' E . ')'

    Pl   shift, and go to state 59
    Mo   shift, and go to state 60
    Mu   shift, and go to state 61
    And  shift, and go to state 62
    Or   shift, and go to state 63
    Lt   shift, and go to state 64
    Eq   shift, and go to state 65
    ')'  shift, and go to state 85


State 58

   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'
   20 C: . C Se Ca
   21  | . Sk
   22  | . '{' C '}'
   23  | . V '(' L_args ')'
   24  | . Ca
   25 Ca: . Wh E Do Ca
   26   | . If E Th C El Ca
   26   | If E Th . C El Ca
   27   | . Et Af E
   28   | . V Af E

    If   shift, and go to state 13
    Wh   shift, and go to state 14
    Sk   shift, and go to state 15
    V    shift, and go to state 16
    '{'  shift, and go to state 17

    Et  go to state 18
    C   go to state 86
    Ca  go to state 20


State 59

    2 E: . E Pl E
    2  | E Pl . E
    3  | . E Mo E
    4  | . E Mu E
    5  | . E Or E
    6  | . E Lt E
    7  | . E Eq E
    8  | . E And E
    9  | . Not E
   10  | . '(' E ')'
   11  | . I
   12  | . V
   13  | . true
   14  | . false
   15  | . V '(' L_args ')'
   16  | . NewAr TP '[' E ']'
   17  | . Et
   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'

    true   shift, and go to state 31
    false  shift, and go to state 32
    Not    shift, and go to state 33
    NewAr  shift, and go to state 34
    I      shift, and go to state 35
    V      shift, and go to state 36
    '('    shift, and go to state 37

    E   go to state 87
    Et  go to state 39


State 60

    2 E: . E Pl E
    3  | . E Mo E
    3  | E Mo . E
    4  | . E Mu E
    5  | . E Or E
    6  | . E Lt E
    7  | . E Eq E
    8  | . E And E
    9  | . Not E
   10  | . '(' E ')'
   11  | . I
   12  | . V
   13  | . true
   14  | . false
   15  | . V '(' L_args ')'
   16  | . NewAr TP '[' E ']'
   17  | . Et
   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'

    true   shift, and go to state 31
    false  shift, and go to state 32
    Not    shift, and go to state 33
    NewAr  shift, and go to state 34
    I      shift, and go to state 35
    V      shift, and go to state 36
    '('    shift, and go to state 37

    E   go to state 88
    Et  go to state 39


State 61

    2 E: . E Pl E
    3  | . E Mo E
    4  | . E Mu E
    4  | E Mu . E
    5  | . E Or E
    6  | . E Lt E
    7  | . E Eq E
    8  | . E And E
    9  | . Not E
   10  | . '(' E ')'
   11  | . I
   12  | . V
   13  | . true
   14  | . false
   15  | . V '(' L_args ')'
   16  | . NewAr TP '[' E ']'
   17  | . Et
   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'

    true   shift, and go to state 31
    false  shift, and go to state 32
    Not    shift, and go to state 33
    NewAr  shift, and go to state 34
    I      shift, and go to state 35
    V      shift, and go to state 36
    '('    shift, and go to state 37

    E   go to state 89
    Et  go to state 39


State 62

    2 E: . E Pl E
    3  | . E Mo E
    4  | . E Mu E
    5  | . E Or E
    6  | . E Lt E
    7  | . E Eq E
    8  | . E And E
    8  | E And . E
    9  | . Not E
   10  | . '(' E ')'
   11  | . I
   12  | . V
   13  | . true
   14  | . false
   15  | . V '(' L_args ')'
   16  | . NewAr TP '[' E ']'
   17  | . Et
   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'

    true   shift, and go to state 31
    false  shift, and go to state 32
    Not    shift, and go to state 33
    NewAr  shift, and go to state 34
    I      shift, and go to state 35
    V      shift, and go to state 36
    '('    shift, and go to state 37

    E   go to state 90
    Et  go to state 39


State 63

    2 E: . E Pl E
    3  | . E Mo E
    4  | . E Mu E
    5  | . E Or E
    5  | E Or . E
    6  | . E Lt E
    7  | . E Eq E
    8  | . E And E
    9  | . Not E
   10  | . '(' E ')'
   11  | . I
   12  | . V
   13  | . true
   14  | . false
   15  | . V '(' L_args ')'
   16  | . NewAr TP '[' E ']'
   17  | . Et
   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'

    true   shift, and go to state 31
    false  shift, and go to state 32
    Not    shift, and go to state 33
    NewAr  shift, and go to state 34
    I      shift, and go to state 35
    V      shift, and go to state 36
    '('    shift, and go to state 37

    E   go to state 91
    Et  go to state 39


State 64

    2 E: . E Pl E
    3  | . E Mo E
    4  | . E Mu E
    5  | . E Or E
    6  | . E Lt E
    6  | E Lt . E
    7  | . E Eq E
    8  | . E And E
    9  | . Not E
   10  | . '(' E ')'
   11  | . I
   12  | . V
   13  | . true
   14  | . false
   15  | . V '(' L_args ')'
   16  | . NewAr TP '[' E ']'
   17  | . Et
   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'

    true   shift, and go to state 31
    false  shift, and go to state 32
    Not    shift, and go to state 33
    NewAr  shift, and go to state 34
    I      shift, and go to state 35
    V      shift, and go to state 36
    '('    shift, and go to state 37

    E   go to state 92
    Et  go to state 39


State 65

    2 E: . E Pl E
    3  | . E Mo E
    4  | . E Mu E
    5  | . E Or E
    6  | . E Lt E
    7  | . E Eq E
    7  | E Eq . E
    8  | . E And E
    9  | . Not E
   10  | . '(' E ')'
   11  | . I
   12  | . V
   13  | . true
   14  | . false
   15  | . V '(' L_args ')'
   16  | . NewAr TP '[' E ']'
   17  | . Et
   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'

    true   shift, and go to state 31
    false  shift, and go to state 32
    Not    shift, and go to state 33
    NewAr  shift, and go to state 34
    I      shift, and go to state 35
    V      shift, and go to state 36
    '('    shift, and go to state 37

    E   go to state 93
    Et  go to state 39


State 66

   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'
   25 Ca: . Wh E Do Ca
   25   | Wh E Do . Ca
   26   | . If E Th C El Ca
   27   | . Et Af E
   28   | . V Af E

    If  shift, and go to state 13
    Wh  shift, and go to state 14
    V   shift, and go to state 75

    Et  go to state 18
    Ca  go to state 94


State 67

    2 E: E . Pl E
    3  | E . Mo E
    4  | E . Mu E
    5  | E . Or E
    6  | E . Lt E
    7  | E . Eq E
    8  | E . And E
   28 Ca: V Af E .  [$end, Def, Dep, Se, If, El, Wh, Sk, V, '{', '}']

    Pl   shift, and go to state 59
    Mo   shift, and go to state 60
    Mu   shift, and go to state 61
    And  shift, and go to state 62
    Or   shift, and go to state 63
    Lt   shift, and go to state 64
    Eq   shift, and go to state 65

    $default  reduce using rule 28 (Ca)


State 68

    2 E: E . Pl E
    3  | E . Mo E
    4  | E . Mu E
    5  | E . Or E
    6  | E . Lt E
    7  | E . Eq E
    8  | E . And E
   31 L_argsnn: E .  [')']
   32         | E . ',' L_argsnn

    Pl   shift, and go to state 59
    Mo   shift, and go to state 60
    Mu   shift, and go to state 61
    And  shift, and go to state 62
    Or   shift, and go to state 63
    Lt   shift, and go to state 64
    Eq   shift, and go to state 65
    ','  shift, and go to state 95

    $default  reduce using rule 31 (L_argsnn)


State 69

   23 C: V '(' L_args . ')'

    ')'  shift, and go to state 96


State 70

   30 L_args: L_argsnn .

    $default  reduce using rule 30 (L_args)


State 71

    2 E: E . Pl E
    3  | E . Mo E
    4  | E . Mu E
    5  | E . Or E
    6  | E . Lt E
    7  | E . Eq E
    8  | E . And E
   18 Et: V '[' E . ']'

    Pl   shift, and go to state 59
    Mo   shift, and go to state 60
    Mu   shift, and go to state 61
    And  shift, and go to state 62
    Or   shift, and go to state 63
    Lt   shift, and go to state 64
    Eq   shift, and go to state 65
    ']'  shift, and go to state 97


State 72

   22 C: '{' C '}' .

    $default  reduce using rule 22 (C)


State 73

    2 E: E . Pl E
    3  | E . Mo E
    4  | E . Mu E
    5  | E . Or E
    6  | E . Lt E
    7  | E . Eq E
    8  | E . And E
   27 Ca: Et Af E .  [$end, Def, Dep, Se, If, El, Wh, Sk, V, '{', '}']

    Pl   shift, and go to state 59
    Mo   shift, and go to state 60
    Mu   shift, and go to state 61
    And  shift, and go to state 62
    Or   shift, and go to state 63
    Lt   shift, and go to state 64
    Eq   shift, and go to state 65

    $default  reduce using rule 27 (Ca)


State 74

    2 E: E . Pl E
    3  | E . Mo E
    4  | E . Mu E
    5  | E . Or E
    6  | E . Lt E
    7  | E . Eq E
    8  | E . And E
   19 Et: Et '[' E . ']'

    Pl   shift, and go to state 59
    Mo   shift, and go to state 60
    Mu   shift, and go to state 61
    And  shift, and go to state 62
    Or   shift, and go to state 63
    Lt   shift, and go to state 64
    Eq   shift, and go to state 65
    ']'  shift, and go to state 98


State 75

   18 Et: V . '[' E ']'
   28 Ca: V . Af E

    Af   shift, and go to state 41
    '['  shift, and go to state 43


State 76

   20 C: C Se Ca .

    $default  reduce using rule 20 (C)


State 77

   20 C: C . Se Ca
   47 D: D_entp L_vart C .  [Def, Dep, If, Wh, Sk, V, '{']

    Se  shift, and go to state 47

    $default  reduce using rule 47 (D)


State 78

   20 C: C . Se Ca
   48 D: D_entf L_vart C .  [Def, Dep, If, Wh, Sk, V, '{']

    Se  shift, and go to state 47

    $default  reduce using rule 48 (D)


State 79

   46 D_entf: Def NFon '(' L_argt . ')' ':' TP

    ')'  shift, and go to state 99


State 80

   34 L_argt: L_argtnn .  [')']
   36 L_argtnn: L_argtnn . ',' Argt

    ','  shift, and go to state 100

    $default  reduce using rule 34 (L_argt)


State 81

   35 L_argtnn: Argt .

    $default  reduce using rule 35 (L_argtnn)


State 82

   45 D_entp: Dep NPro '(' L_argt . ')'

    ')'  shift, and go to state 101


State 83

    2 E: . E Pl E
    3  | . E Mo E
    4  | . E Mu E
    5  | . E Or E
    6  | . E Lt E
    7  | . E Eq E
    8  | . E And E
    9  | . Not E
   10  | . '(' E ')'
   11  | . I
   12  | . V
   13  | . true
   14  | . false
   15  | . V '(' L_args ')'
   16  | . NewAr TP '[' E ']'
   16  | NewAr TP '[' . E ']'
   17  | . Et
   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'

    true   shift, and go to state 31
    false  shift, and go to state 32
    Not    shift, and go to state 33
    NewAr  shift, and go to state 34
    I      shift, and go to state 35
    V      shift, and go to state 36
    '('    shift, and go to state 37

    E   go to state 102
    Et  go to state 39


State 84

   15 E: V '(' L_args . ')'

    ')'  shift, and go to state 103


State 85

   10 E: '(' E ')' .

    $default  reduce using rule 10 (E)


State 86

   20 C: C . Se Ca
   26 Ca: If E Th C . El Ca

    Se  shift, and go to state 47
    El  shift, and go to state 104


State 87

    2 E: E . Pl E
    2  | E Pl E .  [$end, Def, Dep, Se, If, Th, El, Wh, Do, Pl, Mo, Mu, And, Or, Lt, Eq, Sk, V, ')', ']', '{', '}', ',']
    3  | E . Mo E
    4  | E . Mu E
    5  | E . Or E
    6  | E . Lt E
    7  | E . Eq E
    8  | E . And E

    $default  reduce using rule 2 (E)

    Conflict between rule 2 and token Pl resolved as reduce (%left Pl).
    Conflict between rule 2 and token Mo resolved as reduce (%left Mo).
    Conflict between rule 2 and token Mu resolved as reduce (%left Mu).
    Conflict between rule 2 and token And resolved as reduce (%left And).
    Conflict between rule 2 and token Or resolved as reduce (%left Or).
    Conflict between rule 2 and token Lt resolved as reduce (%left Lt).
    Conflict between rule 2 and token Eq resolved as reduce (%left Eq).


State 88

    2 E: E . Pl E
    3  | E . Mo E
    3  | E Mo E .  [$end, Def, Dep, Se, If, Th, El, Wh, Do, Pl, Mo, Mu, And, Or, Lt, Eq, Sk, V, ')', ']', '{', '}', ',']
    4  | E . Mu E
    5  | E . Or E
    6  | E . Lt E
    7  | E . Eq E
    8  | E . And E

    $default  reduce using rule 3 (E)

    Conflict between rule 3 and token Pl resolved as reduce (%left Pl).
    Conflict between rule 3 and token Mo resolved as reduce (%left Mo).
    Conflict between rule 3 and token Mu resolved as reduce (%left Mu).
    Conflict between rule 3 and token And resolved as reduce (%left And).
    Conflict between rule 3 and token Or resolved as reduce (%left Or).
    Conflict between rule 3 and token Lt resolved as reduce (%left Lt).
    Conflict between rule 3 and token Eq resolved as reduce (%left Eq).


State 89

    2 E: E . Pl E
    3  | E . Mo E
    4  | E . Mu E
    4  | E Mu E .  [$end, Def, Dep, Se, If, Th, El, Wh, Do, Pl, Mo, Mu, And, Or, Lt, Eq, Sk, V, ')', ']', '{', '}', ',']
    5  | E . Or E
    6  | E . Lt E
    7  | E . Eq E
    8  | E . And E

    $default  reduce using rule 4 (E)

    Conflict between rule 4 and token Pl resolved as reduce (%left Pl).
    Conflict between rule 4 and token Mo resolved as reduce (%left Mo).
    Conflict between rule 4 and token Mu resolved as reduce (%left Mu).
    Conflict between rule 4 and token And resolved as reduce (%left And).
    Conflict between rule 4 and token Or resolved as reduce (%left Or).
    Conflict between rule 4 and token Lt resolved as reduce (%left Lt).
    Conflict between rule 4 and token Eq resolved as reduce (%left Eq).


State 90

    2 E: E . Pl E
    3  | E . Mo E
    4  | E . Mu E
    5  | E . Or E
    6  | E . Lt E
    7  | E . Eq E
    8  | E . And E
    8  | E And E .  [$end, Def, Dep, Se, If, Th, El, Wh, Do, Pl, Mo, Mu, And, Or, Lt, Eq, Sk, V, ')', ']', '{', '}', ',']

    $default  reduce using rule 8 (E)

    Conflict between rule 8 and token Pl resolved as reduce (%left Pl).
    Conflict between rule 8 and token Mo resolved as reduce (%left Mo).
    Conflict between rule 8 and token Mu resolved as reduce (%left Mu).
    Conflict between rule 8 and token And resolved as reduce (%left And).
    Conflict between rule 8 and token Or resolved as reduce (%left Or).
    Conflict between rule 8 and token Lt resolved as reduce (%left Lt).
    Conflict between rule 8 and token Eq resolved as reduce (%left Eq).


State 91

    2 E: E . Pl E
    3  | E . Mo E
    4  | E . Mu E
    5  | E . Or E
    5  | E Or E .  [$end, Def, Dep, Se, If, Th, El, Wh, Do, Pl, Mo, Mu, And, Or, Lt, Eq, Sk, V, ')', ']', '{', '}', ',']
    6  | E . Lt E
    7  | E . Eq E
    8  | E . And E

    $default  reduce using rule 5 (E)

    Conflict between rule 5 and token Pl resolved as reduce (%left Pl).
    Conflict between rule 5 and token Mo resolved as reduce (%left Mo).
    Conflict between rule 5 and token Mu resolved as reduce (%left Mu).
    Conflict between rule 5 and token And resolved as reduce (%left And).
    Conflict between rule 5 and token Or resolved as reduce (%left Or).
    Conflict between rule 5 and token Lt resolved as reduce (%left Lt).
    Conflict between rule 5 and token Eq resolved as reduce (%left Eq).


State 92

    2 E: E . Pl E
    3  | E . Mo E
    4  | E . Mu E
    5  | E . Or E
    6  | E . Lt E
    6  | E Lt E .  [$end, Def, Dep, Se, If, Th, El, Wh, Do, Pl, Mo, Mu, And, Or, Lt, Eq, Sk, V, ')', ']', '{', '}', ',']
    7  | E . Eq E
    8  | E . And E

    $default  reduce using rule 6 (E)

    Conflict between rule 6 and token Pl resolved as reduce (%left Pl).
    Conflict between rule 6 and token Mo resolved as reduce (%left Mo).
    Conflict between rule 6 and token Mu resolved as reduce (%left Mu).
    Conflict between rule 6 and token And resolved as reduce (%left And).
    Conflict between rule 6 and token Or resolved as reduce (%left Or).
    Conflict between rule 6 and token Lt resolved as reduce (%left Lt).
    Conflict between rule 6 and token Eq resolved as reduce (%left Eq).


State 93

    2 E: E . Pl E
    3  | E . Mo E
    4  | E . Mu E
    5  | E . Or E
    6  | E . Lt E
    7  | E . Eq E
    7  | E Eq E .  [$end, Def, Dep, Se, If, Th, El, Wh, Do, Pl, Mo, Mu, And, Or, Lt, Eq, Sk, V, ')', ']', '{', '}', ',']
    8  | E . And E

    $default  reduce using rule 7 (E)

    Conflict between rule 7 and token Pl resolved as reduce (%left Pl).
    Conflict between rule 7 and token Mo resolved as reduce (%left Mo).
    Conflict between rule 7 and token Mu resolved as reduce (%left Mu).
    Conflict between rule 7 and token And resolved as reduce (%left And).
    Conflict between rule 7 and token Or resolved as reduce (%left Or).
    Conflict between rule 7 and token Lt resolved as reduce (%left Lt).
    Conflict between rule 7 and token Eq resolved as reduce (%left Eq).


State 94

   25 Ca: Wh E Do Ca .

    $default  reduce using rule 25 (Ca)


State 95

    2 E: . E Pl E
    3  | . E Mo E
    4  | . E Mu E
    5  | . E Or E
    6  | . E Lt E
    7  | . E Eq E
    8  | . E And E
    9  | . Not E
   10  | . '(' E ')'
   11  | . I
   12  | . V
   13  | . true
   14  | . false
   15  | . V '(' L_args ')'
   16  | . NewAr TP '[' E ']'
   17  | . Et
   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'
   31 L_argsnn: . E
   32         | . E ',' L_argsnn
   32         | E ',' . L_argsnn

    true   shift, and go to state 31
    false  shift, and go to state 32
    Not    shift, and go to state 33
    NewAr  shift, and go to state 34
    I      shift, and go to state 35
    V      shift, and go to state 36
    '('    shift, and go to state 37

    E         go to state 68
    Et        go to state 39
    L_argsnn  go to state 105


State 96

   23 C: V '(' L_args ')' .

    $default  reduce using rule 23 (C)


State 97

   18 Et: V '[' E ']' .

    $default  reduce using rule 18 (Et)


State 98

   19 Et: Et '[' E ']' .

    $default  reduce using rule 19 (Et)


State 99

   46 D_entf: Def NFon '(' L_argt ')' . ':' TP

    ':'  shift, and go to state 106


State 100

   36 L_argtnn: L_argtnn ',' . Argt
   37 Argt: . V ':' TP

    V  shift, and go to state 5

    Argt  go to state 107


State 101

   45 D_entp: Dep NPro '(' L_argt ')' .

    $default  reduce using rule 45 (D_entp)


State 102

    2 E: E . Pl E
    3  | E . Mo E
    4  | E . Mu E
    5  | E . Or E
    6  | E . Lt E
    7  | E . Eq E
    8  | E . And E
   16  | NewAr TP '[' E . ']'

    Pl   shift, and go to state 59
    Mo   shift, and go to state 60
    Mu   shift, and go to state 61
    And  shift, and go to state 62
    Or   shift, and go to state 63
    Lt   shift, and go to state 64
    Eq   shift, and go to state 65
    ']'  shift, and go to state 108


State 103

   15 E: V '(' L_args ')' .

    $default  reduce using rule 15 (E)


State 104

   18 Et: . V '[' E ']'
   19   | . Et '[' E ']'
   25 Ca: . Wh E Do Ca
   26   | . If E Th C El Ca
   26   | If E Th C El . Ca
   27   | . Et Af E
   28   | . V Af E

    If  shift, and go to state 13
    Wh  shift, and go to state 14
    V   shift, and go to state 75

    Et  go to state 18
    Ca  go to state 109


State 105

   32 L_argsnn: E ',' L_argsnn .

    $default  reduce using rule 32 (L_argsnn)


State 106

   38 TP: . T_boo
   39   | . T_int
   40   | . T_ar TP
   46 D_entf: Def NFon '(' L_argt ')' ':' . TP

    T_boo  shift, and go to state 25
    T_int  shift, and go to state 26
    T_ar   shift, and go to state 27

    TP  go to state 110


State 107

   36 L_argtnn: L_argtnn ',' Argt .

    $default  reduce using rule 36 (L_argtnn)


State 108

   16 E: NewAr TP '[' E ']' .

    $default  reduce using rule 16 (E)


State 109

   26 Ca: If E Th C El Ca .

    $default  reduce using rule 26 (Ca)


State 110

   46 D_entf: Def NFon '(' L_argt ')' ':' TP .

    $default  reduce using rule 46 (D_entf)
